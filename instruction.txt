                                                                  
                                                               Стартовый Шаблон


Запускаем проект в Prepros, ставим галочки source - js - main.js ставим auto compile и убираем uglify js и на vendors убираем auto compile. 
Так делаем перед каждым новым запуском. Main.js это конечный файл в которой они все собирают.
=======================================================================================================================================================================

Файл js.kit
1. Одна из последних версий jquery. Обновить!!!
2. Закоментированна Миграция. Можно уже убрать. Оно не нужно.
3. Vendors. В файле хранятся подключаемые дополнения к jquery. Если нужно подключить какие то библиотечки, слайдер, скролл и т.д., делаем это в этом файле.
4. Main.js. В этом файле собираются все куски js файлов котроые уже мы пишем. 
5. Custom.js просто пустой файл для програмистов, чтобы они не лезли в наши файлы, а работали отдельно в этом файле.
=======================================================================================================================================================================

                                                                Файл style.scss

@mixin - Миксины - комплект свойств с разными префиксами для разных браузеров. 
=======================================================================================================================================================================

- Сетка Адаптива/Переменные
1. Минимальная ширина, меньше которой браузер не должен сжиматься - 320px.
2. Пишем Ширину Контейнера из Макета. 
3. На основании Ширины из макеты вычисляется первый Брекпоинт. 
Ширина контейнера по макету + 12px, срабатывает первый Брекпоинт.Это значение можно менять на свой вкус. Например: 1170 + 12 = 1182px.
4. md2 - Планшетное расширение
5. md3 - Телефонное номинальное рассширение.
6. md4 - Разделение телефонов на большие и маленькие.
=======================================================================================================================================================================

- Оболочка
Wrapper - настроен так, чтобы всякие косяки и вылезы за пределы экрана не вызывали горизонтального скролла.
=======================================================================================================================================================================

- Основная сетка
На основании Переменных настроен Контейнер, который подстраивается под расширения экрана с учетом указанных переменных.
Указанна первая переменная и настроенны следующие 3 Брекпоинта.
Первая переменная это Например: 1170 + 12 = 1182px. В этой точке происходит срабатывание Брекпоинта и контейнер по ширине становится 970px.
В большинстве случаев уже ничего делать ненадо. Основная часть Адаптива уже сделанна.
=======================================================================================================================================================================

- Подключение Файлов Стилей и Страниц и Элементов
Здесь подключение разных страниц Стилей. 
Создаем новую страницу, например Контакты. @import. "contacts.scc"; Подключаем здесь отьдельный файл scss(12мин). Который потом сохраняем в папку source scss.
Страница Контакты будем стилизированна в отдельном scss файле.
======================================================================================================================================================================

- Подключение файлов UI стилей форм и готовых классов (13мин)
1. forms.scss - в этом отдельном файле написанны стили которые касаются элементов форм. Заготовка. Всякие чекбоксы, селекты, кнопки и т.д. 
Например Кнопка .btn - для нее уже описанны какие-то стили и уже дописываем сами по дизайну свои значения. Тоже самое под селекты инпуты и прочее.
 
2. ui.scss - Сборище готовых классов. Например у нас title одинаковый на всех страницах. Описываем его в этом файле и он срабатывает везде. 
Так и для всего остального. Для удобства все эти классы и выведенны в отдельный файл. В этом файле находится много вспомогательных классов, 
например класс для табуляции, вспомогательных класс для вставки видео. Для Слик-Слайдера, для скрытого текста, 
для ibg - позиционирование бэкграунда и скрытия картинки. Mirror - разворот картинки, зеркальный разворот любого блока. 
Это куски кода, которые каждый раз нужно писать, но зачем, если они уже созданны, просто этими классами пользуемся.
=======================================================================================================================================================================

                                                               Взаимодействие Кода и Java-Script

Popup
Полностью настроенны, сделанны. Нужно только их стилизировать и вызывать.
Вызов Попапов: делаем обычную ссылку, например - <a href="" class="link pl">текст</a>. Чтобы вызвать Попап, нужно добавить в ссылку класс pl и в href написать
имя попапа - #callback. Открываем popup.kit и там в самом попапе указанно - popup-callback это и есть наш попап. Создавая новый другой,
копируем его и вставляем в него другое название ссылки popup-...

В этом попапе конструкция построенна таблицами, очень надежная, работает везде.  Popup - Popup-table-table - cell - это конструкция попапа, а далее идет сам контент.
В попапе есть блок Закрыть, Блок тайтл, текст и форма. То,  что чаще всего используется. Например форма обратной связи.
Все стили для Попапов написанны в файле popup.scss. 


Popup-Видео.
Это Попап для видео с ютуба.
вставляем только код.
Вызов:

<a href="#video" data-vid="Ссылка с ютуба" class="link pl">Попап с видео</a>
=======================================================================================================================================================================

Табы Табуляция Вкладки (20.45мин)
Создаем Таб: <div class="block__tabs tabs"></div>. Первым делом нам нужно добавить класс tabs. Он не имеет никакого css, он подвязан к java-script.
Внутри блока строим сам таб. Структура:

<div class="block__tabs tabs">
 <nav class="block__nav">
  <div class="block__navitem tab__navitem active">Первая</div>
  <div class="block__navitem tab__navitem">Вторая</div>
 </nav>
 <div class="block__items">
  <div class="block__item tab__item active">Описание 1</div>
  <div class="block__item tab__item">Описание 2</div>
 </div>
</div>

Чтобы табы заработали: к навигационным элементам добавляем класс tab__navitem. А к самим вкладкам добавляем tab__item.
Класс tab__item - в спомогательном файле ui.scss - выключен - display.none. Поэтому текст не появится. И только при Активе он display:block.
Добавляем класс active к нужной вкладке, напрмер первой и первая вкладка активна. Стилизуем в файле style.scss.
=======================================================================================================================================================================

Спойлер (25.35мин)
Штука, на которую нажал и открылся какой то текст. 
Структура двух спойлеров:


<div class="block__spollers spollers">
 <div class="spollers__item">
  <div class="spollers__title spoller closeall">Открой меня</div>
  <div class="spollers__text">
   Lorem ipsum dolor sit amet, consectetur adipisicing elit. 
  </div>
 </div>
					
 <div class="spollers__item">
  <div class="spollers__title spoller closeall">Открой меня</div>
  <div class="spollers__text">
   Lorem ipsum dolor sit amet, consectetur adipisicing elit. 
 </div>
</div>

Чтобы он начал работать, добавляем к классу title, на который мы будем нажимать доп класс spoller.
Если будет два спойлера, чтобы один показывался, другой скрывался, дописываем класс closeall в тот же title. Будет некий Аккардеон. 
=======================================================================================================================================================================

                                                                           Формы (29.39 мин)


1. Input - общий класс для которого все уже написанно в файле forms.scss. Уже решены проблемы с айфонами.
В нем меняем стили котороые нам нужны и это будет класс инпут для всего сайта.
Структура:

<form class="block__form form-block" action="#">
 <div class="form-block__item">
  <input autocomplete="off" type="text" name="form[]" data-value="Имя" class="input req">
 </div>
</form>

Для того чтобы работал placeholder добавляем инпуту класс data-value="Имя". Это реализованно java-script, потому что data-value="" выполняет огромное колличество
разных всяких действий.
 

2. Сниппеты - Чекбоксы

<form class="block__form form-block" action="#">
 <div class="form-block__item">
  <div class="check">
   <input type="checkbox" value="1" name="form[]">
  </div>
 </div>
</form>

Для нажатия на чекбокс на него вешается класс active. И бефором добавляем какую то картинку.


3. Радиокнопки
Структура:

<form class="block__form form-block" action="#">
 <div class="form-block__item">
  <div class="options">
   <div class="option active">
    Текст
    <input type="radio" value="1" name="form[type]">
   </div>
   <div class="option">
    Текст 2
    <input type="radio" value="2" name="form[type]">
   </div>
  </div>
 </div>
</form>

В файле forms.scss для них уже задан стиль. Внешнее оформлеение пишем сами под свои нужды.


4. Селекты (самое сложное что есть в шаблоне)
Структура:

<form class="block__form form-block" action="#">
 <div class="form-block__item">
  <select name="form[]" class="form-block">
    <option value="1" selected="selected">Пункт 1</option>
    <option value="2">Пункт 2</option>
    <option value="3">Пункт 3</option>
    <option value="4">Пункт 4</option>
  </select>
 </div>
 <div class="form-block__item">
  <button type="submit" class="form-block__btn btn">Задать вопрос</button>.
 </div>
</form>

Мы его не увидим, java-script скрывает его. На его основе джава формирует кучу дивов, он выстраивает этот селект, но уже в дивах, для того, 
чтобы мы могли его стилизовать. Стили для селектов так же уже написанны. В файле forms.scss для них уже задан стиль.
Как менять стили6 Инспектируем и смотрим в появляющихся дивах что за что отвечает и пойти в файлик и их поменять.
Сложность состоит в том, что в выпадающем списке используют скролл, как правило он кастомный, поэтому мы плавно подошли к подключению разных библиотечек.

Если хотим использовать селект, открываем vendors.js, и открываем шпаргалку js.txt. Все это находится в source в папке js.
Нас интересует эта запись - //@prepros-append jquery.nicescroll.min.js. Копируем эту строчку,  вставляем в vendors.js, 
сохраняем и у нас сразу подключается эта библиотечка. 

Класс form-block__select появится сам и дальше мы може добавлять его в form.scss и описывать.

Стили самомго скролла меняются в библиотеках. В файле form.js все это написанно, и с 4 по 189 (221) строку это все настройки селекта. И в самом начале, на старте
есть настройки самого скролла. Это плагин - nicescroll (можно найти в гугле, в поиске, в гитхабе лежит). В целом здесь уже все хорошо настроенно, 
и под мобилки, максимум что нужно будет менять это цвет. 


Валидация. 
Чтобы заставить пользователя ввести имя в поле "Введите имя", нам нужно добавить в класс инпута класс req (уже внесенно).
Если имя не ввести,  появляется класс err и в файле forms.scss он уже есть и мы на него вешаем какой то стиль, например бордер: красный - обводка красной рамкой.
Допустим Заказчик хочет, чтобы выводился еще и текст ошибки какой то. Пищем в инпуте data-error="Текст ошибки". 
Полностью будет выглядеть так:

<form class="block__form form-block" action="#">
 <div class="form-block__item">
  <input autocomplete="off" type="text" name="form[]" data-value="Имя" data-error="Текст ошибки" class="input req">
 </div>
</form>

Проинспектируя, увидим, что появляется див с классом form__error и заверстать его ка нам нужно.
Добавив класс l, в отдельную строку выносится название того что ввели. 
Полностью будет выглядеть так:

<form class="block__form form-block" action="#">
 <div class="form-block__item">
  <input autocomplete="off" type="text" name="form[]" data-value="Имя" data-error="Текст ошибки" class="input l req">
 </div>
</form>


Валидация на email.
Структура:

<form class="block__form form-block" action="#">
 <div class="form-block__item">
  <input autocomplete="off" type="text" name="form[]" data-value="Введите email" data-error="Текст ошибки" class="input email req">
 </div>
</form>

Фишки формы.
Есть возможность после отправки формы выводит попап - всплывающее окно. 
Структура:

<form class="block__form form-block data-ms="ms_1" action="#">
 <div class="form-block__item">
  <input autocomplete="off" type="text" name="form[]" data-value="Введите email" data-error="Текст ошибки" class="input email req">
 </div>
</form>

В фале forms.js есть прописанный стиль ms. Добавляем его в саму форму как указанно выше, и указываем какой то класс, например ms_1 (data-ms="ms_1"). 
Потом перейти в popup.kit и в первую строку попап добавить два класса massege ms_1 а callback убрать.
После чего в папке forms.scss нужно стилизировать текст и сам попап.
Отправлять форму на сервер она не будет, а будет выводит сообщение, всплывающее окно. Это сделанно для того, если форма у нас на ajax.
=======================================================================================================================================================================

Ползунки с выбором (к примеру цены)
Открываем файл js.kit и шпаргалку js.txt. Копируем из папки js.txt - <script src="https://code.jquery.com/ui/1.12.1/jquery-ui.min.js"></script> и 
и вставляем ее в файл js.kit.
Дальше вставляем html код в index.kit.

Структура:

<form class="block__form form-block" action="#">
 <div class="form-block__item">
  <div class="category-params-item-price">
   <div class="category-params-item-price-table table">
    <div class="cell">
     <input type="text" name="form[]"id="rangefrom">
    </div>
    <div class="cell">
     <input type="text" name="form[]"id="rangeto">
    </div>
    <div class="category-params-item-price-range"></div>
   </div>
  </div>
 </div>
</form> 

Под этот файл уже все прописанно и в стилях forms.scss и в java. Осталось только стилизовать. Если нужно функционально менять, нужно идти в jquery.com/ui
и там уже все менять.
=======================================================================================================================================================================

Рейтинг
Когда нужно поставить какую то оценку.
Структура:

<form class="block__form form-block" action="#">
 <div class="form-block__item">
 <div class="rating-block">
  <div class="rating-edit">
   <div class="rating-line"></div>
   <div class="rating-activeline"></div>
   <input value="4.3" type="hidden" name="rating">
   <div class="stars">
    <span class="star"><i>Ужасно</i></span>
    <span class="star"><i>Плохо</i></span>
    <span class="star"><i>Нормально</i></span>
    <span class="star"><i>Хорошо</i></span>
    <span class="star"><i>Отлично</i></span>
   </div>
  </div>
  <div class="rating__value">4.3</div>
 </div>
 </div>
</form> 

Плюс этого рейтинга в том, что тут работают десятичные. Оценка 4.3 и видно что звездочка чуть чуть окрашенна.
Стили уже добавленны в файле forms.scss - rating. 
Для того, чтобы отключить возможность указывать оценку, нужно убрать - edit - из этого дива - <div class="rating-edit">.
Саму оценку мы указываем в значении value.
=======================================================================================================================================================================

                                                                        Библиотечки
Файл source - js
Не все файлы которые там лежат используются. 
Про основные:

1. jquery.ui.touch-punch.min.js - подключаем когда нам нужно, чтобы например ползунки работали на тачскринах.
Еще раз как подключать: Идем в source - vendors, открываем js.txt, находим там нужный файл, копируем и вставляем в vendors.js котороый лежит в source.

В шпаргалке js.txt указанны не все библеотечки, которые лежат в файле js. Там те которые используются часто при верстке. Далее о тех что указанны в файле js.txt.

2. baguetteBox.js - Галерея, при нажатии на картинку она зумируется. 
Первое что делаем, подключаем ее в vendors, потом идем в style.scss и Подключение Файлов Стилей и Элементов добавляем:
@import "baguetteBox.scss"; 
Далее в index.kit создаем структуру:

<div class="block__gallery gallery-block gallery">
  <a href="img/картинка.jpg" class="gallery-block__item">
   <img src="img/картинка.jpg" alt="">
  </a>
 </div>

Далее стили этой структуры нужно описать. Для того, чтобы картинка зумировалась, у родителя в диве добавляем класс gallery.
а в ссылке указываем путь до картинки такой же картинки но большой.

Если таких картинок много. они будут работать как Галерея, листаться. Так же листаеься и тачскрином.
структура:

<div class="block__gallery gallery-block gallery">
  <a href="img/картинка.jpg" class="gallery-block__item">
   <img src="img/картинка.jpg" alt="">
  </a>
  <a href="img/картинка.jpg" class="gallery-block__item">
   <img src="img/картинка.jpg" alt="">
  </a>
  <a href="img/картинка.jpg" class="gallery-block__item">
   <img src="img/картинка.jpg" alt="">
  </a>
  <a href="img/картинка.jpg" class="gallery-block__item">
   <img src="img/картинка.jpg" alt="">
  </a>
  <a href="img/картинка.jpg" class="gallery-block__item">
   <img src="img/картинка.jpg" alt="">
  </a>
 </div>

Стили для этой галереи которые нужно менять,  лежат в файле - baguetteBox.scss.


3. clooud-zoom - не нужно уже, очень устарела.
4. circle-progress и foolscroll - крайне редко используются. Библиотечки для фулскриновых сайтов. Сейчас все намного проще делается.

5. isotope - прикольная штука, которая выстраивает разные плиточки в разнобросс. 
Подключаем библиотеку, идем на сайт изотопа, смотрим как оно работает, берем и от туда html и встраиваем.

6.jq-end и jq-start - вспомогательный файлы.

7. animateNumber - библиотечка которая анимирует цифры. Например от 0 до 100 быстро набирались. 
Подключение: Подключаем, Копируем название, идем в гугл, находим на сайте, на сайте смотим как она работает, и используем.

8. script.js - файл для написания нами своего java-script. Там уже много чего есть. Popup там описанны. Там в любом месте можно писать свой код.

9. autosizeinput - позволяет инпуту увеличиваться в размере, в зависимости от заданного текста.

10. inputmask - для задания маски полю. 
Подключение: берем файл из js.txt копируем и подключаем в vendors. 
Структура: 

<form class="block__form form-block data-ms="ms_1" action="#">
 <div class="form-block__item">
  <input autocomplete="off" type="text" name="form[]" data-value="Введите email" data-error="Текст ошибки" class="input phone req">
 </div>
</form>

Чтобы подключить в инпуте добавляем класс phone.
Маску эту можно менять в файле forms.js. - masks и там набор разных масок, для разных стран и регионов. 


11. mousewheel - нужно для какого то программирования, подключаются функции когда мы можем отслеживать колесико мыши, особо к верстке не относится.

12. nicescroll - кастомный скролл. Описание было выше в селектах.

13. autogrow - что то типо autosize - подключаем и увеличивается textarea.

14. parllax - подключает возможность всяких паралакс штук, но редко используется, потому что она очень грамоздкая, а реально можно сделать самому и из пары строчек.

15. popover - Всплывающие подсказки.
Подключение: копируем из js.txt в vendors. 
Структура:

<div class="block__text">
  Текст...какой то текст...<span data-content="text text" class="tip">?</span>
</div>

Мы хотим чтобы при наведении на знак вопроса, у нас появилосб всплывающее окно с подсказкой. Не попап а именно при наведении.
Для этого span добавляем класс tip и нужно подключить стили этих всплывашек popover.min.scss в файл style.scss в Подключение Файлов Стилей и Элементов. 

Нужно больше о ней узнать, находим в гугле webiPopover и читаем. Если нужно поменятьь стили, открываем его файл стилей и меняем popover.min.scss.


16. livesearch - очень редко используется. Часть селекта, позволяющая искать по нему.

17. main.js - файл, который собирает все файлы. 
- jq-start - открывающий файл.
- jq-end - закрывающий файл.
- forms.js - подключение всех штук для форм и всего того что в нем.
- script.js - там табы всякие, попапы и в script.js пишем свой код для конкретного проекта (здесь надо прописать js своих бургеров и попапов и код для инпутов скрытых).

map.js подключаем в файл main.js из файла js.txt. 


18. map.js - написан кусок кода для подключения карты. Закоментирован код карты яндекса. Поумолчанию карта от гугл. 
Подключение: map.js подключаем в файл main.js из файла js.txt. 

Код из файла js.txt <script src="https://maps.google.com/maps/api/js?sensor=false&amp;key=AIzaSyAe2qamce_RVw-APqN7EqsaGZ2Cm5Zciss"></script>
<script src="https://api-maps.yandex.ru/2.1/?apikey=88450800-c3cf-4124-9321-04e971d0c3d8&lang=ru_RU" type="text/javascript"></script> сами карты,
подключаем в файл js.kit а в файле map.js все настройки. По всем этим настройкам читать документацию по картам гугл и яндекс.

Подключение в html.kit. Структура:

<div class="block__map" id="map"></div>

И в стилях нужно задать какую то высоту, например h-500px. И сразу появиться карта.


19. responsive - в нем написанна заготовка для динамического адаптива. Современные сайты довольно так сложно адаптировать и многие делают две версии блоков,
блок для пк версии, а для мобилки они блок для пк скрывают - display:none, и показывают другой для мобилки. Мы так не делаем, мы перебрасываем блоки,
из одного места в другой, чтобы как минимум не плодить кучу кода, при помощи java-script а точнее в jquery. И в этом файле написанна заготовка как это делать.

Подключение: копируем его из файла js.txt в файл main.js. 


20. scroll.js - 
Подключение: копируем его из файла js.txt в файл main.js.

Структура: 

<div class="block-1 sector">
 Какой то текст...
</div>

<div class="block-2 sector">
 Какой то текст...
</div>>

<div class="block-3 sector">
 Какой то текст...
</div>

<div class="block-4 sector">
 Какой то текст...
</div>>

<div class="block-5 sector">
 Какой то текст...
</div>

Есть куча блоков, добавляем к ним ко всем класс sector. При прокрутке страницы и достижении этого блока, 
он к нему добавляет класс, по мере того как доскроливаем до блока.
И появится два класса - viev и active. viev когда блок только появляется, а active немного позже, ближе к середине блока. И в зависимости от этого, 
мы можем что то отображать, скрывать. Заготовка, когда нужно проделывать какие то манипуляции со скролом, анимацией. 
Так же автоматически при при добавлении этого файла при скролле добавляет класс скролл к шапке. 


21. typed - не использовал очень давно, не нужен.

22. uidatepicker - русификатор для календарика, который используется в jquery ui. Очень давно не использовал.

23. slick.min.js и sliders.js - библиотека СликСлайдер. Слайдер мощный классный, решает все задачи.
В файлике sliders есть заготовочка под него. Самая верхняя, все что ниже это обрывки кода всякого. Меняем все в верхней части файла и настраиваем все как нужно,
по документации. 
Подключение: копируем файл sliders.js из файла js.txt в файл main.js. и slick.min.js в venders.
=======================================================================================================================================================================



Содержание:
00:00 Лирическое вступление
00:54 Настройка в препросе main.js vendors.js (в шаблоне выставлены по умолчанию)
01:55 Вступление (комментарии Жени по шаблону)
04:00 Обзор index.kit
04:45 Обзор js.html
06:04 Обзор style.css  @mixin, шрифты, переменные, сетка адаптива, обнуляющий стиль, оболочка, основная сетка, подключение файлов стилей и страниц элементов
15:35  Popup
20:45 Табуляция
25:35 Спойлер
29:39 Формы. Так как это большой фрагмент видео содержащий много всего, внизу будет приведен список содержимого по таймингам.
30:15 input type="text"
31:22 placeholder
31:57 checkbox
34:10 radio
35:42 select
42:46 Строка ошибки ввода, проверка правильности ввода, попап ошибки ???
50:20 Вызов попап с видео
55:02 Ползунки с выбором (к примеру цены)
57:20 Рейтинг
37:48 Инструкция по подключению библиотек
59:32 - Обзор библиотек Так как это большой фрагмент видео содержащий много всего внизу будет приведен список содержимого по таймингам.
1:00:42 Галерея "baguetteBox.js"
1:05:20 Изотоп "isotope.pkgd.min.js"
1:06:23 Анимированные цифры "jquery.animateNumber.min.js"
1:06:32 Как подключать библиотеки, упоминается "script.js"
1:07:15 изменения инпут в размере "jquery.autosize.input.min.js"
1:07:26 Задание маски полю, для телефонных полей. "jquery.inputmask.bundle.min.js"
1:09:30 Кастомный скролл "jquery.nicescroll.min.js" и "jquery.ns-autogrow.min.js" (что-то вроде "jquery.autosize.input.min.js" только для текстареа)
1:10:10 Всплывающие подсказки "jquery.popover.min.js"
1:13:15 - Описание "main.js" и "vendor.js". По сути это файлы для собирания скриптов (Тех файлов библиотек о которых здесь говориться).
1:14:45 Подключение карт "map.js"
1:16:33 Заготовка для динамического адаптива "responsive.js"
1:18:26 Манипуляций со скролом "scroll.js"
1:21:38 Установка и манипуляции со слайдером "slick.min.js" "sliders.js"
1:23:24 послесловие





















